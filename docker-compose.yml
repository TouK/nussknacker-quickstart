name: nussknacker

services:

  ### Quickstart setup container 
  quickstart-setup:
    image: touk/nussknacker-example-scenarios-library:1.4.0
    depends_on:
      nginx:
        condition: service_healthy
      designer:
        condition: service_healthy
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    environment:
      NU_DESIGNER_ADDRESS: "nginx:8080"
      NU_REQUEST_RESPONSE_OPEN_API_SERVICE_ADDRESS: "nginx:8181"
      KAFKA_ADDRESS: "kafka:9092"
      SCHEMA_REGISTRY_ADDRESS: "schema-registry:8081"
      DISABLE_SCENARIO_REDEPLOY: "true"
    healthcheck:
      test: [ "CMD-SHELL", "/healthcheck.sh" ]
      interval: 5s
      retries: 25
      timeout: 10s
      start_period: 10s
    volumes:
      - nussknacker_designer_shared_configuration:/opt/nussknacker/conf/additional
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'

  ### Nussknacker-related services

  nginx:
    image: nginx:1.26.0-alpine
    restart: unless-stopped
    ports:
      - 8080:8080
      - 8181:8181
    depends_on:
      grafana:
        condition: service_healthy
      designer:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080 || exit 1" ]
      interval: 10s
      retries: 10
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/additional:/etc/nginx/additional
    deploy:
      resources:
        limits:
          memory: 64M

  ### Nussknacker designer service

  designer:
    image: touk/nussknacker:${NUSSKNACKER_VERSION:?NUSSKNACKER_VERSION must be defined}_scala-2.12
    restart: unless-stopped
    environment:
      EXAMPLE_SCENARIOS_LIBRARY_SERVICE_NAME: quickstart-setup
      CONFIG_FILE: "/opt/nussknacker/conf/application.conf,/opt/nussknacker/conf/additional/additional-configuration.conf,/opt/nussknacker/conf/application-customizations.conf"
      DB_URL: "jdbc:postgresql://postgres:5432/nu-db"
      DB_DRIVER: "org.postgresql.Driver"
      DB_USER: "nu"
      DB_PASSWORD: "nupassword"
      NUSSKNACKER_LOG_LEVEL: "INFO"
      KAFKA_ADDRESS: "kafka:9092"
      SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      INFLUXDB_URL: "http://influxdb:8086"
      FLINK_REST_URL: "http://flink-jobmanager:8081"
      JDK_JAVA_OPTIONS: "-Xmx400M -XX:MaxMetaspaceSize=300M -XX:MaxDirectMemorySize=100M"
      USAGE_REPORTS_SOURCE: "quickstart-docker-compose"
    depends_on:
      postgres:
        condition: service_healthy
      grafana:
        condition: service_healthy
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      flink-jobmanager:
        condition: service_healthy
      flink-taskmanager:
        condition: service_started
    expose:
      - 8181
    healthcheck:
      test: [ "CMD-SHELL", "curl localhost:8080/api/app/healthCheck" ]
      interval: 10s
      retries: 10
    volumes:
      - nussknacker_designer_shared_configuration:/opt/nussknacker/conf/additional
      - ./designer/application-customizations.conf:/opt/nussknacker/conf/application-customizations.conf
    volumes_from:
      - flink-jobmanager
    deploy:
      resources:
        limits:
          memory: 1024M

  postgres:
    image: postgres:13
    restart: unless-stopped
    environment:
      POSTGRES_DB: "nu-db"
      POSTGRES_USER: "nu"
      POSTGRES_PASSWORD: "nupassword"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d nu-db -U nu"]
      interval: 10s
      retries: 10
    volumes:
      - nussknacker_designer_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 256M

  ### Nussknacker metrics-related services:

  grafana:
    image: grafana/grafana:10.1.10
    restart: unless-stopped
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:/grafana"
      GF_SECURITY_ALLOW_EMBEDDING: "true"
    depends_on:
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 3000"]
      interval: 10s
      retries: 10
    volumes:
      - ./grafana:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    deploy:
      resources:
        limits:
          memory: 256M

  influxdb:
    image: influxdb:1.8.10
    restart: unless-stopped
    environment:
      INFLUXDB_DB: "nussknacker_metrics"
    healthcheck:
      test: [ "CMD-SHELL", "influx -execute 'SHOW DATABASES'" ]
      interval: 10s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 128M

  ### KAFKA-related services:

  kafka:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    hostname: nu-kafka
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 10s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 512M

  schema-registry:
    image: bitnami/schema-registry:7.6.1
    restart: unless-stopped
    environment:
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_KAFKA_BROKERS: "PLAINTEXT://kafka:9092"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", 'echo -e "GET /subjects HTTP/1.1\r\nHost: localhost\r\nConnection: close\r\n\r\n" | nc localhost 8081 | grep -q "HTTP/1.1 200 OK" | exit 0']
      interval: 10s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 384M

  akhq:
    image: tchiotludo/akhq:0.24.0
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        micronaut:
          server:
            context-path: /akhq
        akhq:
          connections:
            nussknacker-kafka:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://schema-registry:8081"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080" ]
      interval: 10s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 512M

  ### FLINK-related services

  flink-jobmanager:
    build:
      context: ./flink/
      args:
        FLINK_VERSION: "1.19.1-scala_2.12-java11"
      no_cache: true
    restart: unless-stopped
    command: jobmanager
    environment:
      JOB_MANAGER_RPC_ADDRESS: "flink-jobmanager"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/jobs/overview" ]
      interval: 10s
      retries: 10
    volumes:
      - nussknacker_flink_data:/opt/flink/data
    deploy:
      resources:
        limits:
          memory: 1500M

  flink-taskmanager:
    build:
      context: ./flink/
      args:
        FLINK_VERSION: "1.19.1-scala_2.12-java11"
      no_cache: true
    restart: unless-stopped
    command: taskmanager
    environment:
      JOB_MANAGER_RPC_ADDRESS: "flink-jobmanager"
    depends_on:
      flink-jobmanager:
        condition: service_healthy
      telegraf:
        condition: service_healthy
    volumes_from:
      - flink-jobmanager
    deploy:
      resources:
        limits:
          memory: 1500M

  telegraf:
    image: telegraf:1.30.2
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8087/write" ]
      interval: 10s
      retries: 10
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    deploy:
      resources:
        limits:
          memory: 256M

volumes:
  nussknacker_designer_data:
    name: nussknacker_designer_data
  nussknacker_designer_shared_configuration:
    name: nussknacker_designer_shared_configuration
  nussknacker_flink_data:
    name: nussknacker_flink_data
